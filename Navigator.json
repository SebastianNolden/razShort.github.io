{
  "HTML": {
    "Head": {
      "content": "Die Überschriftenelemente bestehen aus sechs verschiedenen Leveln. <h1> ist die Überschrift mit der höchsten Gewichtung und <h6> mit der kleinsten. Ein Überschriften-Element beschreibt das Thema des Bereiches, welcher der Überschrift folgt. Überschriften können auch verwendet werden, um ein Inhaltsverzeichnis für ein Dokument automatisch zu erstellen.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/h1-h6"
      ]
    },
    "Paragraph": {
      "content": "Das <p>-Element erzeugt einen Absatz, den zusammenhängenden Abschnitt eines längeren Textes. In HTML kann <p> jedoch für jedwede Art von zu gruppierendem, zusammenhängendem Inhalt genutzt werden, zum Beispiel Bilder oder Formularfelder.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/p"
      ]
    },
    "Hyperlinks": {
      "content": "Hyperlinks, kurz Links, sind ein wichtiger Teil des Internets, denn sie machen erst ein Netzwerk daraus. In diesem Artikel zeigen wir Ihnen wie man einen Link erstellt und stellen benutzerfreundliche Anwendungsbeispiele vor. Hyperlinks sind eine der Erfindungen, welche das Internet zu einem einzigen zusammenhängenden Netzwerk machen. Sie sind von Beginn an ein Teil des Netzes (engl. web) und definieren dieses, indem sie uns erlauben von einem Dokument auf ein anderes Dokument (oder eine andere Quelle) zu verweisen. Auch auf bestimmte Inhalte einer Webseite kann direkt verlinkt werden, genauso wie auch auf Apps per Hyperlink verwiesen werden kann. Fast alles im Internet kann zu einem Link konvertiert werden und mit diesem kann die entsprechende Web-Adresse (URL) im Internet von einem Browser gefunden werden.",
      "references": [
        "https://developer.mozilla.org/de/docs/Learn/HTML/Introduction_to_HTML/Creating_hyperlinks"
      ]
    },
    "Div": {
      "content": "Das HTML-Element <div> (Englisch: HTML Document Division Element) ist ein allgemeiner Container für fließenden Inhalt, dem keine semantische Bedeutung zugeordnet wird. Der wesentliche Unterschied zwischen <div> und anderen Block-Elementen wie beispielsweise <article> oder <p> ist die semantische Bedeutung bzw. das Fehlen dieser. Während <article> einen Artikel, einen eigenständigen Bereich eines Dokuments darstellt und <p> einen Textabsatz, gibt <div> seinem Inhalt keine Bedeutung. <div> sollte deshalb nur genutzt werden, falls kein anderes Block-Element eine zutreffendere Aussage macht. Der Einsatzbereich von <div> ist die Gruppierung von Elementen alleine zum Zweck der Gestaltung oder des programmatischen Zugriffs (mit Hilfe des class- oder id-Attributs), oder weil sie die gleichen Attribut-Werte besitzen, wie zum Beispiel das Attribut lang.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/HTML/Element/div",
        "https://wiki.selfhtml.org/wiki/HTML/Elemente/div"
      ]
    }
  },
  "CSS": {
    "Selektoren": {
      "content": "Selektoren definieren, auf welche Elemente eine Reihe von CSS Regeln angewendet wird.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/CSS_Selectors"
      ]
    },
    "Farben": {
      "content": "Der CSS Datentyp Color beschreibt eine Farbe im sRGB Farbraum. Eine Farbe kann auf eine von drei Arten beschrieben werden: Schlüsselworte, rgb und rgba, hsl und hsla. ...",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/CSS/Farben"
      ]
    },
    "Web Worker API": {
      "content": "Ein Worker ist ein Objekt das mit einem Konstruktor erzeugt wird (beispielsweise Worker() (en-US)) und eine JavaScript Datei mit Namen ausführt. In dieser Datei ist der Code enthalten der im Worker-Thread ausgeführt wird. Worker arbeiten in einem eigenen globalen Kontext, der vom aktuellen Hauptkontext window verschieden ist. Dieser Kontext ist durch das Objekt  DedicatedWorkerGlobalScope  repräsentiert, falls es sich um einen dedizierten Worker handelt (also einen Worker der nur von einem Skript genutzt wird, was der Standard ist.). Shared Workers benutzen das Objekt SharedWorkerGlobalScope (en-US). Man kann bis auf einige Ausnahmen beliebige Anweisungen ausführen. Beispielsweise kann man das DOM nicht direkt ändern und auch einige Standardmethoden und -attribute von window können nicht genutzt werden. Viele andere Elemente von window können allerdings schon genutzt werden, unter anderem WebSockets und Datenspeicher, wie IndexedDB und die Firefox-OS-only Data Store API. Unter Functions and classes available to workers finden Sie mehr Details. Daten werden zwischen den Workern und dem Hauptthread mithilfe eines Nachrichtensystems verschickt — beide Seiten verschicken ihre Nachrichten mit der postMessage() Methode und antworten mit dem onmessage Event Handler (die empfangene Nachricht ist im data Attribut Message des Events enthalten). Die Daten werden kopiert und nicht geteilt. Worker können neue Worker erzeugen, solange diese vom selben Ursprung gehosted werden wie die Ursprungsseite.  Außerdem können Worker XMLHttpRequest für Netzwerk I/O benutzen mit der Ausnahme, dass  die responseXML und channel Attribute von XMLHttpRequest stets null zurückgeben.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/API/Web_Workers_API"
      ]
    },
    "async function": {
      "content": "Die async function Deklaration definiert eine asynchrone Funktion, die ein AsyncFunction Objekt zurück gibt. Asynchrone Funktionen laufen über den Event Loop außerhalb des üblichen Kontrollflusses, und geben als Ergebnis ein implizites Promise Objekt zurück. Die Syntax und der Aufbau des Codes bei einer asynchronen Funktion ähnelt allerdings der den standardmässigen synchronen Funktionen. Eine async function kann auch durch den async function expression Ausdruck definiert werden.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/async_function"
      ]
    }
  },
  "JavaScript": {
    "Funktion": {
      "content": "Funktionen sind ein Grundbaustein in JavaScript. Eine Funktion ist eine Prozedur - eine Reihe von Anweisungen, um eine Aufgabe auszuführen oder eine Wert auszurechnen. Um Funktionen zu verwenden, müssen diese im Scope (Gültigkeitsbereich) deklariert werden, in dem sie ausgeführt werden soll.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Guide/Funktionen"
      ]
    },
    "Objekt": {
      "content": "Ein Objekt ist eine Sammlung von zusammenhängenden Daten und/oder Funktionalitäten. Diese bestehen üblicherweise aus verschiedenen Variablen und Funktionen, die Eigenschaften und Methoden genannt werden, wenn sie sich innerhalb von Objekten befinden.",
      "references": [
        "https://developer.mozilla.org/de/docs/Learn/JavaScript/Objects/Basics"
      ]
    },
    "Node.js": {
      "content": "Node.js ist eine platformübergreifendes JavaScript-Runtime-Environment (Laufzeitumgebung), die es Entwicklern ermöglicht, serverseitige Anwendungen und Netzwerkanwendungen mit JavaScript zu erstellen.",
      "references": [
        "https://developer.mozilla.org/de/docs/Glossary/Node.js"
      ]
    },
    "Klasse": {
      "content": "Die Klassendeklaration erstellt eine neue Klasse mit einem Namen unter Verwendung von prototypen Vererbung. Sie können eine Klasse auch mit Hilfe einer class expression definieren. Unglücklicherweise ist es mit diesen class-Ausdrücken nicht möglich eine existierende Klasse erneut zu deklarieren. Dieses führt zu einem TypeError.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/class"
      ]
    },
    "for...in": {
      "content": "Die Schleife for…in durchläuft alle eigenen und geerbten Eigenschaften, die als aufzählbar gekennzeichnet sind und deren Name kein Symbol ist, in einer nicht festgelegten Reihenfolge. Die Eigenschaften eines Javascript-Objekts können anhand ihres internen Statusfeldes enumerable als aufzählbar oder nicht aufzählbar gekennzeichnet werden. Insbesondere erben manche eingebaute Objekte wie Array und Object nicht-aufzählbare Eigenschaften von Object.prototype and String.prototype, unter anderem die Methoden String.indexOf und Object.toString (en-US). Nicht-aufzählbare Eigenschaften werden von for…in ignoriert. Obwohl die Reihenfolge bei Ausführung innerhalb desselben Interpreters als festgelegt erscheinen kann, darf von diesem Umstand nicht ausgegangen werden. Andere Versionen und insbesondere andere Javascript-Interpreter werden die Eigenschaften in einer anderen Reihenfolge durchlaufen. Die Gründe sind in der Beschreibung des Operators delete näher erklärt. Gelöschte, hinzugefügte oder modifizierte Eigenschaften Änderungen der Eigenschaften eines Objekts, während dieses Objekt von for…in durchlaufen wird, haben nachfolgende Auswirkungen: Eine Änderung des Wertes einer Eigenschaft wirkt sich sofort auf alle nachfolgenden Schleifendurchläufe aus. Eine Eigenschaft, die gelöscht wurde, bevor die Schleife sie eigentlich erreicht hätte, wird nicht mehr aufgerufen. Eine Eigenschaft, die hinzugefügt wird, kann von der Schleife noch abgearbeitet werden, muss jedoch nicht. Das Verhalten ist nicht vorhersehbar. Im Allgemeinen ist es ratsam, innerhalb einer Schleife keine Änderungen an den Eigenschaften des durchlaufenden Objekts vorzunehmen. Eine Ausnahme bildet lediglich die derzeit bearbeitete Eigenschaft. Es gibt keine Garantie, dass eine hinzugefügte Eigenschaft von der Schleife noch aufgerufen wird, ob eine geänderte (außer der aktuellen) Eigenschaft vor oder nach der Änderung aufgerufen wird oder ob eine gelöschte Eigenschaft aufgerufen wird, bevor sie gelöscht wird.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/for...in"
      ]
    },
    "Debugger": {
      "content": "Die Anweisung debugger ruft eine nicht näher bestimmte Debugging-Funktionalität des Interpreters auf. Naheliegend, jedoch nicht vorgeschrieben, ist das Pausieren des Programmablaufs und Öffnen des Debuggers an dieser Stelle. Stellt der Interpreter keine Debugging-Möglichkeiten zur Verfügung, hat die Anweisung keine Auswirkungen.",
      "references": [
        "https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Statements/debugger"
      ]
    }
  }
}
